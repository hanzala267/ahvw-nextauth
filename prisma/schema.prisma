generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String
  firstName        String?
  lastName         String?
  role             String    @default("user")
  isApproved       Boolean   @default(false)
  resetToken       String?
  resetTokenExpiry DateTime?
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  vehicles         Vehicle[]
  employeeHours    EmployeeHours[]
  employeeStats    EmployeeStats[]
  comments         Comment[]
}

model Inventory {
  id              Int                @id @default(autoincrement())
  partName        String
  brand           String
  invoiceNumber   String
  costPrice       Float
  sellPrice       Float
  totalStock      Int
  partDescription String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  serviceItems    ServiceInventory[]
}

model Vehicle {
  id           Int       @id @default(autoincrement())
  name         String
  ownerId      String?
  owner        User?     @relation(fields: [ownerId], references: [id])
  licensePlate String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  services     Service[]
}

model Service {
  id             Int                @id @default(autoincrement())
  vehicleId      Int
  vehicle        Vehicle            @relation(fields: [vehicleId], references: [id])
  status         String             @default("Booked")
  totalCost      Float              @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  completionDate DateTime?
  serviceItems   ServiceItem[]
  inventoryItems ServiceInventory[]
  invoice        Invoice?
  employeeHours  EmployeeHours[]
  comments       Comment[]
}

model ServiceItem {
  id        Int     @id @default(autoincrement())
  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])
  name      String
  price     Float
}

model ServiceInventory {
  id          Int       @id @default(autoincrement())
  serviceId   Int
  service     Service   @relation(fields: [serviceId], references: [id])
  inventoryId Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  quantity    Int

  @@unique([serviceId, inventoryId])
}

model Invoice {
  id        String   @id @default(cuid())
  serviceId Int      @unique
  service   Service  @relation(fields: [serviceId], references: [id])
  amount    Float
  status    String   @default("PENDING")
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeeHours {
  id         Int      @id @default(autoincrement())
  employeeId String   @map("employeeId")
  employee   User     @relation(fields: [employeeId], references: [id])
  serviceId  Int
  service    Service  @relation(fields: [serviceId], references: [id])
  hours      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([employeeId, serviceId])
}

model EmployeeStats {
  id         Int      @id @default(autoincrement())
  employeeId String
  employee   User     @relation(fields: [employeeId], references: [id])
  date       DateTime @default(now())
  hours      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([employeeId, date])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId Int
  service   Service  @relation(fields: [serviceId], references: [id])
}